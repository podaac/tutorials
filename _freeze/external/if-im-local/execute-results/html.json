{
  "hash": "ba888749ae9043089653c068ae8166db",
  "result": {
    "markdown": "---\ntitle: How do I access Cloud Data from my Local Machine?\nexecute:\n    eval: false\n---\n\n## Downloading data\n\nWhen you have found the data you want to use, you have two options.  You can download the data to work locally, or access the data directly to work in the cloud. This second way of working is called \"_Direct Cloud Access_\" or simply, \"_Direct Access_\". \n\nThis page covers two situations of downloading data from Earthdata Cloud to your local machine:\n\n* Downloading data using the `earthaccess` library\n* Downloading data from an OPeNDAP server\n\n## earthaccess\n\n::: {.panel-tabset group=\"language\"}\n\n## Python\n\nWe can use the [`earthaccess`](https://nsidc.github.io/earthaccess/) python library to grab the file URLs and then access them with the `xarray` library. \n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n#Import packages\nimport earthaccess\nimport xarray as xr\n\n#Authentication with Earthdata Login\nauth = earthaccess.login(strategy=\"netrc\")\n\n#Access land ice height from ATLAS/ICESat-2 V005 (10.5067/ATLAS/ATL06.005), searching for data over western Greenland coast over two weeks in July 2022. The data are provided as HDF5 granules (files) that span about 1/14th of an orbit.\n\nresults = earthaccess.search_data(short_name=\"ATL06\",\n                                  version=\"005\",\n                                  cloud_hosted=True,\n                                  temporal = (\"2022-07-17\",\"2022-07-31\"),\n                                  bounding_box = (-51.96423,68.10554,-48.71969,70.70529))\n\nfiles = earthaccess.download(results, \"./local_folder\")\n\n#Use xarray to load the data as a multifile dataset for a single group in the HDF5 file, in this case land ice segments:\nds = xr.open_mfdataset(files, group='/gt1l/land_ice_segments')\nds\n```\n:::\n\n\n## R\n\nR code coming soon!\n\n\n```{bash}\n# Coming soon!\n```\n\n\n## Matlab\n\nMatlab code coming soon!\n\n\n```{bash}\n#| echo: true\n# Coming soon!\n```\n\n\n## Command Line\n\nWith `wget` and `curl`:\n\n\n```{bash}\n# Coming soon!\n```\n\n\n\n:::\n\n\n\n\n\n## OPeNDAP\n\nOPeNDAP, or the [Open-source Project for a Network Data Access Protocol](https://www.earthdata.nasa.gov/engage/open-data-services-and-software/api/opendap), is a data server that allows for accessing scientific datasets through the public internet. OPeNDAP links can be acquired through dataset landing pages or the [common metadata repository](https://cmr.earthdata.nasa.gov/search/site/collections/directory/eosdis). Once you have the desired link(s), you can open them as follows:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n#Import packages\nimport xarray as xr\n\nds_https = xr.open_dataset(https://opendap.earthdata.nasa.gov/collections/C2532426483-ORNL_CLOUD/granules/Daymet_Daily_V4R1.daymet_v4_daily_hi_tmax_2010.nc)\n\n# For datasets that contain dap4 specific datatypes, such as `int64`, replace `https` with `dap4` at the beginning to open with xarray. For example:\nurl = https://opendap.earthdata.nasa.gov/collections/C2036881966-POCLOUD/granules/AQUA_MODIS.20220109_20220116.L3m.8D.SST4.sst4.4km\ndap4_url = url.replace(\"https://\", \"dap4://\")\n# dap4_url output: dap4://opendap.earthdata.nasa.gov/collections/C2036881966-POCLOUD/granules/AQUA_MODIS.20220109_20220116.L3m.8D.SST4.sst4.4km\nds_dap4 = xr.open_dataset(dap4_url)\n\n# Note: Some datasets have their variables organized in groups, so within the open_dataset function, you may need to specify 'group=' to access the dataset.\n```\n:::\n\n\nFor more information, see the [OPeNDAP Data Access Client Tutorials](https://opendap.github.io/documentation/tutorials/DataAccessTutorials.html).\n\n",
    "supporting": [
      "if-im-local_files"
    ],
    "filters": [],
    "includes": {}
  }
}